---
title: Solving Equations in With Julia-Defined Types
author: Chris Rackauckas
---

One of the nice things about DifferentialEquations.jl is that it is designed with Julia's type system in mind. What this means is, if you have properly defined a Number type, you can use this number type in DifferentialEquations.jl's algorithms! [Note that this is restricted to the native algorithms of OrdinaryDiffEq.jl. The other solvers such as ODE.jl, Sundials.jl, and ODEInterface.jl are not compatible with some number systems.]

DifferentialEquations.jl determines the numbers to use in its solvers via the types that are designated by `tspan` and the initial condition of the problem. It will keep the time values in the same type as Δt, and the solution values in the same type as the initial condition. [Note that adaptive timestepping requires that the time type is compaible with `sqrt` and `^` functions. Thus dt cannot be Integer or numbers like that if adaptive timestepping is chosen].

Let's solve the linear ODE first define an easy way to get ODEProblems for the linear ODE:

```julia
using DifferentialEquations
f = (u,p,t) -> (1.01*u)
prob_ode_linear = ODEProblem(f,1/2,(0.0,1.0));
```

First let's solve it using Float64s. To do so, we just need to set u0 to a Float64 (which is done by the default) and dt should be a float as well.

```julia
prob = prob_ode_linear
sol =solve(prob,RK4(),dt=1/2^(6))
println(sol)
```

Notice that both the times and the solutions were saved as Float64. Let's change the time to use rational values:

```julia
prob = ODEProblem(f,1/2,(0//1,1//1));
sol = solve(prob,RK4(),dt=1//2^(6))
println(sol)
```

Now let's do something fun. Let's change the solution to use `Rational{BigInt}` and print out the value at the end of the simulation. To do so, simply change the definition of the initial condition.

```julia
const rationalα = 101//100
f = (u,p,t) -> (rationalα*u)
prob = ODEProblem(f,BigInt(1)//BigInt(2),(0//1,1//1));
sol =solve(prob,RK4(),dt=1//2^(6))
println(sol[end])
```

That's one huge fraction!

## Other Compatible Number Types

#### ArbFloats

Let's test a bunch of other number types. First I'm going to test Jeffrey Sarnoff's ArbFloats. These high precision numbers which are much faster than Bigs for less than 500-800 bits of accuracy. Having already installed Nemo and ArbFloats, I can use them in DifferentialEquations.jl via:

```julia
using ArbFloats
const arbalpha = ArbFloat(1.01)
f = (u,p,t) -> (arbalpha*u)
prob_ode_arbfloatlinear = ODEProblem(f,ArbFloat(1)/ArbFloat(2),(0//1,1//1))
sol =solve(prob_ode_arbfloatlinear,RK4(),dt=1//2^(6))
println(sol[end])
```

Bingo! ArbFloats work with DifferentialEquations.jl.

#### DecFP.jl

Next let's try DecFP. DecFP is a fixed-precision decimals library which is made to give both performance but known decimals of accuracy. Having already installed DecFP with `]add DecFP`, I can run the following:

```julia
using DecFP
const decalpha = Dec128(1.01) # Set the constant to a Dec128 as well
f = (u,p,t) -> (decalpha*u)
prob_ode_decfplinear = ODEProblem(f,Dec128(1)/Dec128(2),(0.0,1.0))
sol =solve(prob_ode_decfplinear,RK4(),dt=1//2^(6))
println(sol[end]); println(typeof(sol[end]))
```

Bingo! DecFP works with DifferentialEquations.jl

## Incompatible Number Systems

#### Decimals.jl

Install with `]add Decimals`.

```julia
using Decimals
const decalpha2 = decimal(1.01) # Set the constant to a Dec128 as well
f = (u,p,t) -> (decalpha2*u)
prob_ode_decimallinear = ODEProblem(f,[decimal("1.0")]./[decimal("2.0")],(0//1,1//1))
sol =solve(prob_ode_decimallinear,RK4(),dt=1/2^(6)) #Fails
println(sol[end]); println(typeof(sol[end]))
```

At the time of writing this, Decimals are not compatible. This is not on DifferentialEquations.jl's end, it's on partly on Decimal's end since it is not a subtype of Number. Thus it's not recommended you use Decimals with DifferentialEquations.jl

#### DoubleDouble.jl

Install via `]add DoubleDouble`

```julia
using DoubleDouble
const doublealpha = Double(1.01) # Set the constant to a Dec128 as well
f = (u,p,t) -> (doublealpha*u)
prob_ode_doublelinear = ODEProblem(f,Double(1.0)/Double(2.0),(0.0,1.0))
sol =solve(prob_ode_doublelinear,RK4(),dt=1/2^(6))
println(sol[end]); println(typeof(sol[end]))
```

DoubleDouble errors for many reason. For one, it cannot convert the default parameters form rationals to Double. But even if you set all of the default parameters to Double, it will still error because DoubleDoubles cannot multiply Ints! [An issue has been filed to the DoubleDouble.jl repo for this case](https://github.com/simonbyrne/DoubleDouble.jl/issues/16). If you checkout the branch from the Issue, you will see that it will still error because DoubleDouble isn't compatible with `exp`. [There's another issue for that.](https://github.com/simonbyrne/DoubleDouble.jl/issues/8).

## Conclusion

As you can see, DifferentialEquations.jl can use arbitrary Julia-defined number systems in its arithmetic. The only limitations are the limitations inherent in the number systems themselves. ArbFloats and ArbReals are the most feature-complete and give great performance compared to BigFloats, and thus I recommend their use when high-precision (less than ~512-800 bits) is required. DecFP is a great library for high-performance decimal numbers and works well as well. Other number systems could use some modernization.

## Appendix

```julia{echo=false}
using DiffEqTutorials
DiffEqTutorials.tutorial_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```
