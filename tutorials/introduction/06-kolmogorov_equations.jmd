---
title: Kolmogorov Equations
author: Ashutosh Bharambe
---

```julia
using Flux, StochasticDiffEq
using  NeuralNetDiffEq
using Distributions
using Plots
using LinearAlgebra , DiffEqNoiseProcess
```
## Introduction on Kolmogorov Equations

The one dimensional backward kolmogorov equation that we are going to deal with is of the form :
$$\begin{equation}
  \frac{\partial p}{\partial t} = \mu(x)\frac{\partial p}{\partial x} + \frac{1}{2}{\sigma^2}(x)\frac{\partial^2 p}{\partial x^2}
\end{equation}
$$
Consider a Black Scholes Partial Differential Equation of the form :
$$
\begin{equation}
  \frac{\partial V}{\partial t} + rS\frac{\partial V}{\partial S} + \frac{1}{2}{\sigma^2}{S^2}\frac{\partial^2 V}{\partial S^2} -rV = 0
\end{equation}
$$
In order to make the above equation in the form of the Backward - Kolmogorov PDE we should substitute
$$
\begin{equation}
  V(S , t) = e^{rt}p(S , t)
\end{equation}
\begin{equation}
  p(S , T) = max\{ x - \mathcal{K} , 0 \}
\end{equation}
$$

We should start defining the terminal condition for our equation:
```julia
function phi(xi)
    y = Float64[]
    K = 100
    for x in eachcol(xi)
        val = max(maximum(x) - K , 0.00)
        y = push!(y , val)
    end
    y = reshape(y , 1 , size(y)[1] )
    return y
end
```
Now we shall define the problem :
We will start with a simple one dimensional Black-Scholes PDE and then move to the higher dimensions
We will define the σ and μ by comparing it to the orignal equation.
```julia
d = 1
r = 0.06
sigma = 0.4
xspan = (95.00 , 110.0)
tspan = (0.0 , 1.0)
σ(du , u , p , t) = du .= sigma.*u
μ(du , u , p , t) = du .= r.*u
```
Now once we have defined our problem it is necessary to define the parameters for the solver.
```julia
sdealg = EM()
ensemblealg = EnsembleThreads()
dt = 0.01
dx = 0.01
trajectories = 100000
```

Now lets define our model m and the optimiser
```julia
m = Chain(Dense(d, 32, leakyrelu),Dense(32, 128, leakyrelu),Dense(128 , 32 , leakyrelu) , Dense(32 , 1))
m = fmap(cu , m)
prob = KolmogorovPDEProblem(μ , σ , phi , xspan , tspan, d)
opt = Flux.ADAM(0.01)
sol = solve(prob, NeuralNetDiffEq.NNKolmogorov(m, opt, sdealg, ensemblealg), verbose = true, dt = dt,
            dx = dx , trajectories = trajectories , abstol=1e-6, maxiters = 2000)
```
