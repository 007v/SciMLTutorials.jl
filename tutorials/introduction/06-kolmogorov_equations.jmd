---
title: Kolmogorov Equations
author: Ashutosh Bharambe
---


```julia
using Flux, StochasticDiffEq
using  NeuralNetDiffEq
using Distributions
using Plots
using LinearAlgebra , DiffEqNoiseProcess
```

```julia
function phi(xi)
    y = Float64[]
    K = 100
    for x in eachcol(xi)
        val = max(maximum(x) - K , 0.00)
        y = push!(y , val)
    end
    y = reshape(y , 1 , size(y)[1] )
    return y
end
```

```julia
xspan = (98.00 , 105.00)
tspan = (0.0 , 1.0)
sigma = fill(0.01 , d2 , d2) + Diagonal(fill(0.03 , d2 , d2))
r = 0.06
g(du , u , p , t) = mul!(du ,sigma , u)
f(du , u , p , t) = du .= r.*u
d = 10
sdealg = EM()
ensemlealg = EnsembleThreads()
prob = KolmogorovPDEProblem(f , g, phi , xspan , tspan, d)
opt = Flux.ADAM(0.01)
m = Chain(Dense(d, 16, relu) , Dense(16 , 32 , relu),Dense(32 , 16 , relu), Dense(16 , 1))
sol = solve(prob, NeuralNetDiffEq.NNKolmogorov(m,opt , sdealg, ensemblealg), verbose = true, dt = 0.01,
            dx = 0.01 , trajectories = 100000 , abstol=1e-6, maxiters = 500)

```
